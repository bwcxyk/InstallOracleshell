# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'yaml'
require 'ipaddr'

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

# Vagrant Boxes Source Definition
var_box = 'oraclelinux/7'
var_url = 'https://oracle.github.io/vagrant-projects/boxes/oraclelinux/7.json'

puts ""
puts "│▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒│"
puts " Oracle RAC (Real Application Cluster) Vagrant box for VirtualBox    "
puts "                                                                                  "
puts "----------------------------------------------------------------------------------"
puts " Author: luciferliu <https://github.com/pc-study/InstallOracleshell>              "
puts "                                                                                  "
puts "│▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒│"
puts ""
puts ""

# -----------------------------------------------------------------
# Variables
# -----------------------------------------------------------------

params = YAML.load_file 'config/vagrant.yml'
#
var_provider_name   = params['env']['provider']
#
var_prefix_name     = params['asm']['prefix_name']
var_db_version      = params['env']['db_version']
#
var_domain          = params['asm']['domain']
var_scan_ip1        = params['asm']['scan_ip1']
var_scan_ip2        = params['asm']['scan_ip2']
var_scan_ip3        = params['asm']['scan_ip3']
#
#var_vm1_name        = params['node1']['vm_name']
var_vm1_name        = params['asm']['prefix_name'] + '1'
var_vm1_mem_size    = params['node1']['mem_size']
var_vm1_cpus        = params['node1']['cpus']
var_vm1_public_ip   = params['node1']['public_ip']
var_vm1_vip_ip      = params['node1']['vip_ip']
var_vm1_private_ip  = params['node1']['private_ip']
# var_vm1_storage     = params['node1']['storage_pool_name']
#
#var_vm2_name        = params['node2']['vm_name']
var_vm2_name        = params['asm']['prefix_name'] + '2'
var_vm2_mem_size    = params['node2']['mem_size']
var_vm2_cpus        = params['node2']['cpus']
var_vm2_public_ip   = params['node2']['public_ip']
var_vm2_vip_ip      = params['node2']['vip_ip']
var_vm2_private_ip  = params['node2']['private_ip']
# var_vm2_storage     = params['node2']['storage_pool_name']
#
# ocr
var_asm_ocr_num    = params['asm']['asm_ocr_num']
var_asm_ocr_size   = params['asm']['asm_ocr_size']
var_asm_ocr_redun   = params['asm']['asm_ocr_redun']
#
# data
var_asm_data_num    = params['asm']['asm_data_num']
var_asm_data_size   = params['asm']['asm_data_size']
var_asm_data_redun   = params['asm']['asm_data_redun']
#
var_root_password   = params['env']['root_password']
var_grid_password   = params['env']['grid_password']
var_oracle_password = params['env']['oracle_password']
var_sys_password    = params['env']['sys_password']
var_pdb_password    = params['env']['pdb_password']
#
var_db_name         = params['env']['db_name']
var_pdb_name        = params['env']['pdb_name']
var_cdb             = params['env']['cdb']
var_grid_patch      = params['env']['grid_patch']
var_db_patch        = params['env']['db_patch']

# ---------------------------------------------
# The installation package must ensure the following name！！！Otherwise the installation fails.
if var_db_version == '11'
  # 11GR2
  # grid software
  var_gi_software = 'p13390677_112040_Linux-x86-64_3of7.zip'
  # database software
  var_db_software1 = 'p13390677_112040_Linux-x86-64_1of7.zip'
  var_db_software2 = 'p13390677_112040_Linux-x86-64_2of7.zip'
end

if var_db_version == '12'
  # 12CR2
  # grid software
  var_gi_software = 'INUX.X64_122010_grid_home.zip'
  # database software
  var_db_software = 'LINUX.X64_122010_db_home.zip'
end

if var_db_version == '18'
  # 18C
  # grid software
  var_gi_software = 'LINUX.X64_180000_grid_home.zip'
  # database software
  var_db_software = 'LINUX.X64_180000_db_home.zip'
end

if var_db_version == '19'
  # 19C
  # grid software
  var_gi_software = 'LINUX.X64_193000_grid_home.zip'
  # database software
  var_db_software = 'LINUX.X64_193000_db_home.zip'
end
# -----------------------------------------------------------------
# Provider specific checks
# -----------------------------------------------------------------
if ( (var_provider_name != 'parallels') and (var_provider_name != 'virtualbox') )
  puts "ERROR: 'provider' option can be 'parallels' or 'virtualbox'"
  exit
else
  provider = (var_provider_name).to_sym
  puts "--------------------"
  puts "Detected #{provider}"
  puts "--------------------"
end

# Base Settings
if var_provider_name == 'virtualbox'
  ENV['VAGRANT_DEFAULT_PROVIDER'] || 'virtualbox'
  box_disks_num = 1
  var_virtualbox = 'Y'
elsif var_provider_name == 'parallels'
  box_disks_num = 1
  ENV['VAGRANT_DEFAULT_PROVIDER'] || 'parallels'
  ENV['VAGRANT_NO_PARALLEL'] = 'yes'
else
  puts "Not supported #{provider}, exiting..."
  exit
end

## Storage Setup
if var_provider_name == 'virtualbox'
  var_non_rotational  = params['asm']['non_rotational']
  var_asm_disk_path   = params['asm']['asm_disk_path']

  if ( (var_non_rotational != 'on') and (var_non_rotational != 'off') )
    puts 'ERROR: non_rotational option can be on or off'
    exit
  end

  if var_asm_disk_path.to_s.empty?
    var_asm_disk_path = "./"
  else
    var_asm_disk_path = var_asm_disk_path + "/"
  end
end

# -----------------------------------------------------------------
# Variables check
# -----------------------------------------------------------------
if !var_prefix_name.match? /\A[0-9a-zA-Z-]{1,14}\z/
  puts 'ERROR: prefix_name \'' + var_prefix_name + '\' option can be any combination'
  puts '  {1..13 chars} of lower and uppercase alphanumeric characters (a - z, A - Z, 0 - 9), and hyphen(-)'
  exit
end

if var_vm1_mem_size.to_i < 2048
  puts 'ERROR: vm1_mem_size option can not be less then 2 Gb'
  exit
end
if var_vm2_mem_size.to_i < 2048
  puts 'ERROR: vm2_mem_size option can not be less then 2 Gb'
  exit
end

if ( (var_cdb != true) and (var_cdb != false) )
  puts 'ERROR: cdb option can be true or false'
  exit
end

if var_asm_ocr_num.to_i < 1
  puts 'ERROR: asm_disk_num option can not be less then 1'
  exit
end

if var_asm_data_num.to_i < 1
  puts 'ERROR: asm_disk_num option can not be less then 1'
  exit
end

if var_asm_ocr_size.to_i < 10
  puts 'ERROR: asm_ocr_size option can not be less then 10 Gb'
  exit
end

if var_asm_data_size.to_i < 10
  puts 'ERROR: asm_data_size option can not be less then 10 Gb'
  exit
end

class String
  def is_ip?
    !!IPAddr.new(self) rescue false
  end
end

if ! var_vm1_public_ip.is_ip?
  puts 'ERROR: public_ip for node1 is not a valid IP address'
  exit
end
if ! var_vm1_private_ip.is_ip?
  puts 'ERROR: private_ip for node1 is not a valid IP address'
  exit
end
if ! var_vm1_vip_ip.is_ip?
  puts 'ERROR: vip_ip for node1 is not a valid IP address'
  exit
end


if ! var_vm2_public_ip.is_ip?
  puts 'ERROR: public_ip for node2 is not a valid IP address'
  exit
end
if ! var_vm2_private_ip.is_ip?
  puts 'ERROR: private_ip for node2 is not a valid IP address'
  exit
end
if ! var_vm2_vip_ip.is_ip?
  puts 'ERROR: vip_ip for node1 is not a valid IP address'
  exit
end

if ! var_scan_ip1.is_ip?
  puts 'ERROR: scan_ip1 for node2 is not a valid IP address'
  exit
end
if var_scan_ip2
  if ! var_scan_ip2.is_ip?
    puts 'ERROR: scan_ip3 for node1 is not a valid IP address'
    exit
  end
end
if var_scan_ip3
  if ! var_scan_ip3.is_ip?
    puts 'ERROR: scan_ip3 for node2 is not a valid IP address'
    exit
  end
end

if var_db_name.to_s.empty?
 puts "ERROR: db_name is not defined"
 exit
end

if var_root_password.to_s.empty?
 puts "ERROR: root_password is not defined"
 exit
end
if var_grid_password.to_s.empty?
 puts "ERROR: grid_password is not defined"
  exit
end
if var_oracle_password.to_s.empty?
 puts "ERROR: oracle_password is not defined"
 exit
end
if var_sys_password.to_s.empty?
 puts "ERROR: sys_password is not defined"
 exit
end

if (var_cdb == true)
  if var_pdb_name.to_s.empty?
   puts "ERROR: pdb_name is not defined"
   exit
  end
  if var_pdb_password.to_s.empty?
   puts "ERROR: pdb_password is not defined"
   exit
  end
end

path = "./orcl_software/" + var_gi_software
if ! File.exist?(path)
  puts "ERROR: gi_software does not exist"
  exit
end
if var_db_version == '11'
  path1 = "./orcl_software/" + var_db_software1
  if ! File.exist?(path)
    puts "ERROR: db_software does not exist"
    exit
  end
  path2 = "./orcl_software/" + var_db_software2
  if ! File.exist?(path)
    puts "ERROR: db_software does not exist"
    exit
  end
else
  path = "./orcl_software/" + var_db_software
  if ! File.exist?(path)
    puts "ERROR: db_software does not exist"
    exit
  end
end

# Install required Vagrant plugin
unless Vagrant.has_plugin?("vagrant-reload")
  puts 'Installing vagrant-reload Plugin...'
  system('vagrant plugin install vagrant-reload')
end
unless Vagrant.has_plugin?("vagrant-proxyconf")
  puts 'Installing vagrant-proxyconf Plugin...'
  system('vagrant plugin install vagrant-proxyconf')
end

# Get host time zone for setting VM time zone
offset_sec = Time.now.gmt_offset
if (offset_sec % (60 * 60)) == 0
  offset_hr = ((offset_sec / 60) / 60)
  timezone_suffix = offset_hr >= 0 ? "-#{offset_hr.to_s}" : "+#{(-offset_hr).to_s}"
  var_system_timezone = 'Etc/GMT' + timezone_suffix
else
  # if host time zone isn't an integer hour offset, fall back to UTC
  var_system_timezone = 'UTC'
end

# VMs definition
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
    config.vm.box = var_box
    config.vm.box_url = var_url
    
    config.vm.box_version = ">= 7.8.142"
    
      # Disable automatic box update checking. If you disable this, then
    # boxes will only be checked for updates when the user runs
    # `vagrant box outdated`. This is not recommended.
    config.vm.box_check_update = false
    
    if Vagrant.has_plugin?("vagrant-vbguest")
      config.vbguest.auto_update = false
    end
    
    # add proxy configuration from host env - optional
    if Vagrant.has_plugin?("vagrant-proxyconf")
      puts "getting Proxy Configuration from Host..."
      if ENV["http_proxy"]
        puts "http_proxy: " + ENV["http_proxy"]
        config.proxy.http     = ENV["http_proxy"]
      end
      if ENV["https_proxy"]
        puts "https_proxy: " + ENV["https_proxy"]
        config.proxy.https    = ENV["https_proxy"]
      end
      if ENV["no_proxy"]
        config.proxy.no_proxy = ENV["no_proxy"]
      end
    end
    
    config.ssh.forward_x11 = true

    if var_provider_name == 'virtualbox'
      # vm node2
      config.vm.define :node2 do |node2|
        node2.vm.hostname = var_vm2_name
        node2.vm.network :private_network, ip: var_vm2_public_ip, virtualbox__hostonly: "vboxnet0"
        node2.vm.network :private_network, ip: var_vm2_private_ip, virtualbox__intnet: "private"
        node2.vm.provider :virtualbox do |vb|
          vb.name   = var_prefix_name + "-" + var_vm2_name
          vb.memory = var_vm2_mem_size
          vb.cpus   = var_vm2_cpus

          # Attach default guest vdisks
          disk_num = 0
          while disk_num < box_disks_num do
            vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', disk_num, '--nonrotational', var_non_rotational]
            disk_num += 1
          end

          # Making asm disks
          disk_num = disk_num.to_i + 1
          ## OCR DISKS
          ocr_num = 0
          while ocr_num < var_asm_ocr_num do
            ocr_asm_disk = var_asm_disk_path + "asm_ocr" + ocr_num.to_s + ".vdi"
            # Making disks
            unless File.exist?(ocr_asm_disk)
              vb.customize ['createhd', '--filename', ocr_asm_disk, '--size', var_asm_ocr_size * 1024, '--format', 'VDI', '--variant', 'Fixed']
            end
            vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', disk_num, '--device', 0, '--type', 'hdd', '--medium', ocr_asm_disk, '--mtype', 'shareable', '--nonrotational', var_non_rotational]
            vb.customize ['modifymedium', 'disk', ocr_asm_disk, '--type', 'shareable']
            disk_num += 1
            ocr_num += 1
          end
          ## DATA DISKS
          data_num = 0
          while data_num < var_asm_data_num do
            data_asm_disk = var_asm_disk_path + "asm_data" + data_num.to_s + ".vdi"
            # Making disks
            unless File.exist?(data_asm_disk)
              vb.customize ['createhd', '--filename', data_asm_disk, '--size', var_asm_data_size * 1024, '--format', 'VDI', '--variant', 'Fixed']
            end
            vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', disk_num, '--device', 0, '--type', 'hdd', '--medium', data_asm_disk, '--mtype', 'shareable', '--nonrotational', var_non_rotational]
            vb.customize ['modifymedium', 'disk', data_asm_disk, '--type', 'shareable']
            disk_num += 1
            data_num += 1
          end
        end
      end

    # vm node1
    config.vm.define :node1 do |node1|
      node1.vm.hostname = var_vm1_name
      node1.vm.network :private_network, ip: var_vm1_public_ip, virtualbox__hostonly: "vboxnet0"
      node1.vm.network :private_network, ip: var_vm1_private_ip, virtualbox__intnet: "private"
      node1.vm.provider :virtualbox do |vb|
        vb.name   = var_prefix_name + "-" + var_vm1_name
        vb.memory = var_vm1_mem_size
        vb.cpus   = var_vm1_cpus
        # Attach default guest vdisks
        disk_num = 0
        while disk_num < box_disks_num do
          vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', disk_num, '--nonrotational', var_non_rotational]
          disk_num += 1
        end

        # Attach ASM DISK
        ## OCR DISKS
        ocr_num = 0
        while ocr_num < var_asm_ocr_num do
          ocr_asm_disk = var_asm_disk_path + "asm_ocr" + ocr_num.to_s + ".vdi"
          vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', disk_num, '--device', 0, '--type', 'hdd', '--medium', ocr_asm_disk, '--mtype', 'shareable', '--nonrotational', var_non_rotational]
          vb.customize ['modifymedium', 'disk', ocr_asm_disk, '--type', 'shareable']
          disk_num += 1
          ocr_num += 1
        end
        ## DATA DISKS
        data_num = 0
        while data_num < var_asm_data_num do
          data_asm_disk = var_asm_disk_path + "asm_data" + data_num.to_s + ".vdi"
          vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', disk_num, '--device', 0, '--type', 'hdd', '--medium', data_asm_disk, '--mtype', 'shareable', '--nonrotational', var_non_rotational]
          vb.customize ['modifymedium', 'disk', data_asm_disk, '--type', 'shareable']
          disk_num += 1
          data_num += 1
        end 
      end
      # Enable provisioning with a shell script
      node1.vm.provision "shell", path: "scripts/ora_install.sh", env: {
          "PREFIX_NAME"        => var_prefix_name,
          "NODE1_PUBLIC_IP"    => var_vm1_public_ip,
          "NODE2_PUBLIC_IP"    => var_vm2_public_ip,
          "NODE1_VIP_IP"       => var_vm1_vip_ip,
          "NODE2_VIP_IP"       => var_vm2_vip_ip,
          "NODE1_PRIV_IP"      => var_vm1_private_ip,
          "NODE2_PRIV_IP"      => var_vm2_private_ip,
          "SCAN_IP1"           => var_scan_ip1,
          "SCAN_IP2"           => var_scan_ip2,
          "SCAN_IP3"           => var_scan_ip3,
          "DOMAIN"             => var_domain,
          "ROOT_PASSWORD"      => var_root_password,
          "GRID_PASSWORD"      => var_grid_password,
          "ORACLE_PASSWORD"    => var_oracle_password,
          "SYS_PASSWORD"       => var_sys_password,
          "PDB_PASSWORD"       => var_pdb_password,
          "DB_NAME"            => var_db_name,
          "PDB_NAME"           => var_pdb_name,
          "CDB"                => var_cdb,
          "OCR_REDUN"          => var_asm_ocr_redun,
          "DATA_REDUN"         => var_asm_data_redun,
          "Grid_PATCH"         => var_grid_patch,
          "DB_PATCH"           => var_db_patch,
          "DB_VERSION"         => var_db_version,
          "VIRTUALBOX"         => var_virtualbox
      }
    end
  end

  # Enable ssh password authentication
  config.vm.provision "shell", inline: <<-SHELL
    # change root password
    echo oracle | sudo passwd --stdin root
    sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
    /bin/systemctl restart sshd
    sudo yum repolist all
    
  SHELL

end






